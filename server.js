import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import datetime
import logging
import os
import sys
import psycopg2
from psycopg2 import sql

# тнР рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк тнР
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# --- рзз. ржЖржкржирж╛рж░ рждржерзНржп ржжрж┐ржи (SETTINGS) ---

# тнР ржЯрзЛржХрзЗржи ржУ ржЖржЗржбрж┐ Render Environment Variables ржерзЗржХрзЗ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ тнР
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN") 
try:
    ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID"))
except (TypeError, ValueError):
    # WARNING: ржПржЯрж┐ ржЖржкржирж╛рж░ рж╕ржарж┐ржХ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи!
    ADMIN_USER_ID = 12345678 
    
# тнР PostgreSQL рж╕ржВржпрзЛржЧрзЗрж░ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ тнР
DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    logger.error("тЭМ DATABASE_URL ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓рзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")


# тЬЕ ржЖржкржирж╛рж░ Adsterra Smart Link
ADSTERRA_DIRECT_LINK = "https://roughlydispleasureslayer.com/ykawxa7tnr?key=bacb6ca047e4fabf73e54c2eaf85b2a5" 
TASK_LANDING_PAGE = "https://newspaper.42web.io"

# --- тнР ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯрж┐ржВрж╕ тнР ---
CHANNEL_USERNAME = "@EarnQuickOfficial"
CHANNEL_INVITE_LINK = "https://t.me/EarnQuickOfficial"

# --- тнР ржкрзЯрзЗржирзНржЯ ржУ ржмрзЛржирж╛рж╕ рж╕рзЗржЯрж┐ржВрж╕ тнР ---
DAILY_REWARD_POINTS = 10 
REFERRAL_JOIN_BONUS = 50 
REFERRAL_DAILY_COMMISSION = 2
MIN_WITHDRAW_POINTS = 1000 

# --- рзи. ржбрзЗржЯрж╛ржмрзЗрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржлрж╛ржВрж╢ржи ---

def get_db_connection():
    """PostgreSQL ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи ржХрж░рзЗ"""
    if not DATABASE_URL:
        return None
    try:
        # Render/Heroku-ржПрж░ ржЬржирзНржп SSL ржкрзНрж░ржпрж╝рзЛржЬржи
        conn = psycopg2.connect(DATABASE_URL, sslmode='require') 
        return conn
    except Exception as e:
        logger.error(f"ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНрже: {e}")
        return None

def init_db():
    """ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username VARCHAR(255),
                    points INTEGER DEFAULT 0,
                    last_claim_date DATE,
                    referrer_id BIGINT,
                    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """)
            conn.commit()
            logger.info("тЬЕ PostgreSQL ржЯрзЗржмрж┐рж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    except Exception as e:
        logger.error(f"ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
    finally:
        if conn: conn.close()

def get_user_data(user_id):
    """ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржЙржЬрж╛рж░рзЗрж░ ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рждржерзНржп рж▓рзЛржб ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id, username, points, last_claim_date, referrer_id FROM users WHERE user_id = %s", (user_id,))
            row = cur.fetchone()
            if row:
                return {
                    'user_id': row[0],
                    'username': row[1],
                    'points': row[2],
                    'last_claim_date': row[3],
                    'referrer_id': row[4]
                }
            return None
    except Exception as e:
        logger.error(f"ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return None
    finally:
        if conn: conn.close()

def add_new_user(user_id, username, referrer_id=None):
    """ржирждрзБржи ржЗржЙржЬрж╛рж░ржХрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO users (user_id, username, referrer_id) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO NOTHING",
                (user_id, username, referrer_id)
            )
            conn.commit()
    except Exception as e:
        logger.error(f"ржирждрзБржи ржЗржЙржЬрж╛рж░ ржпрзЛржЧ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
    finally:
        if conn: conn.close()

def update_user_points(user_id, points_change, last_claim_date=None):
    """ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзЯрзЗржирзНржЯ ржЖржкржбрзЗржЯ ржХрж░рзЗ ржПржмржВ ржРржЪрзНржЫрж┐ржХржнрж╛ржмрзЗ ржХрзНрж▓рзЗржорзЗрж░ рждрж╛рж░рж┐ржЦ рж╕рзЗржЯ ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return False
    try:
        with conn.cursor() as cur:
            if last_claim_date:
                cur.execute(
                    "UPDATE users SET points = points + %s, last_claim_date = %s WHERE user_id = %s",
                    (points_change, last_claim_date, user_id)
                )
            else:
                cur.execute(
                    "UPDATE users SET points = points + %s WHERE user_id = %s",
                    (points_change, user_id)
                )
            conn.commit()
            return cur.rowcount > 0
    except Exception as e:
        logger.error(f"ржкржпрж╝рзЗржирзНржЯ ржЖржкржбрзЗржЯрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return False
    finally:
        if conn: conn.close()
        
# --- ржЕрзНржпрж╛ржбржорж┐ржи ржбрзЗржЯрж╛ржмрзЗрж╕ ржлрж╛ржВрж╢ржи ---

def get_bot_stats():
    """ржорзЛржЯ ржЗржЙржЬрж╛рж░ рж╕ржВржЦрзНржпрж╛ ржПржмржВ ржорзЛржЯ ржкрзЯрзЗржирзНржЯ ржмрзЗрж░ ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return {'total_users': 0, 'total_points': 0}
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT COUNT(user_id) AS total_users, COALESCE(SUM(points), 0) AS total_points FROM users;")
            row = cur.fetchone()
            if row:
                return {
                    'total_users': int(row[0]),
                    'total_points': int(row[1])
                }
            return {'total_users': 0, 'total_points': 0}
    except Exception as e:
        logger.error(f"ржмржЯ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return {'total_users': 0, 'total_points': 0}
    finally:
        if conn: conn.close()

def get_user_id_list():
    """ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржерж╛ржХрж╛ рж╕ржорж╕рзНржд ржЗржЙржЬрж╛рж░рзЗрж░ ID ржмрзЗрж░ ржХрж░рзЗ"""
    conn = get_db_connection()
    if not conn: return []
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id FROM users")
            rows = cur.fetchall()
            return [row[0] for row in rows]
    except Exception as e:
        logger.error(f"ржЗржЙржЬрж╛рж░ ID рждрж╛рж▓рж┐ржХрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return []
    finally:
        if conn: conn.close()


# --- рзй. рж╕рж╛рж╣рж╛ржпрзНржпржХрж╛рж░рзА ржлрж╛ржВрж╢ржи: ржЪрзНржпрж╛ржирзЗрж▓ ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржЪрзЗржХ ---

async def check_channel_member(context: ContextTypes.DEFAULT_TYPE, user_id):
    """ржЗржЙржЬрж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗ"""
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        # ржмржЯ ржпржжрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржирж╛ рж╣рзЯ, рждржмрзЗ ржПржЗ ржПрж░рж░ ржЖрж╕рждрзЗ ржкрж╛рж░рзЗред
        logger.warning(f"ржЪрзНржпрж╛ржирзЗрж▓ рж╕ржжрж╕рзНржпржкржж ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}") 
        return False 

async def show_join_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржЬржпрж╝рзЗржи ржХрж░рж╛рж░ рж╢рж░рзНржд ржПржмржВ ржмрж╛ржЯржи ржжрзЗржЦрж╛рзЯ"""
    join_message = (
        f"тЫФ **ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рж╛ ржЖржмрж╢рзНржпржХ!**\n\n"
        f"ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржЕржлрж┐рж╢рж┐рзЯрж╛рж▓ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рзБржиред ржЬрзЯрзЗржи ржХрж░рж╛рж░ ржкрж░рзЗржЗ ржЖржкржирж┐ ржмржЯрзЗрж░ ржорзЗржирзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
    )
    
    join_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯФФ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рзБржи", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton("тЬЕ ржЬрзЯрзЗржи ржХрж░рзЗржЫрж┐, ржЖржмрж╛рж░ ржжрзЗржЦрзБржи", callback_data='check_join')]
    ])
    
    # Message type check to decide whether to edit or reply
    if update.callback_query:
        await update.callback_query.edit_message_text(join_message, reply_markup=join_keyboard, parse_mode=telegram.constants.ParseMode.MARKDOWN)
    elif update.message:
        await update.message.reply_text(join_message, reply_markup=join_keyboard, parse_mode=telegram.constants.ParseMode.MARKDOWN)


# --- рзк. ржХрзАржмрзЛрж░рзНржб рждрзИрж░рж┐ ---

def get_main_keyboard(user_data_row):
    """ржмржЯрзЗрж░ ржкрзНрж░ржзрж╛ржи ржЗржирж▓рж╛ржЗржи ржХрзАржмрзЛрж░рзНржб рждрзИрж░рж┐ ржХрж░рзЗ"""
    current_points = user_data_row.get('points', 0) if user_data_row else 0
    
    keyboard = [
        # --- ржЗржиржХрж╛ржо ржЯрзНрж░рзНржпрж╛ржХ ---
        [InlineKeyboardButton("ЁЯТ░ ржжрзИржирж┐ржХ ржмрзЛржирж╛рж╕ ржХрзНрж▓рзЗржо ржХрж░рзБржи", callback_data='daily_reward')],
        [InlineKeyboardButton("ЁЯУ░ ржЯрзНрж░рзНржпрж╛ржХ рзз: ржЖржЬржХрзЗрж░ ржЦржмрж░ ржжрзЗржЦрзБржи", url=ADSTERRA_DIRECT_LINK)],
        [InlineKeyboardButton("ЁЯФЧ ржЯрзНрж░рзНржпрж╛ржХ рзи: ржЕрзНржпрж╛ржк рж▓рж┐ржЩрзНржХ ржжрзЗржЦрзБржи", url=TASK_LANDING_PAGE)],
        [InlineKeyboardButton("ЁЯза ржЯрзНрж░рзНржпрж╛ржХ рзй: ржХрзБржЗржЬ ржЦрзЗрж▓рзБржи", url=TASK_LANDING_PAGE)],
        # --- ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржУ ржЙржЗржержбрзНрж░рзЯрж╛рж▓ ---
        [InlineKeyboardButton(f"ЁЯУК ржЖржорж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {current_points} ржкрзЯрзЗржирзНржЯ", callback_data='my_account')],
        [InlineKeyboardButton("ЁЯТ╕ ржЙржЗржержбрзНрж░рзЯрж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ", callback_data='withdraw_request')],
        # тнР рж╣рзЛржо ржорзЗржирзБ ржмрж╛ржЯржи
        [InlineKeyboardButton("ЁЯПа ржорзВрж▓ ржорзЗржирзБ", callback_data='start_menu_btn')], 
    ]
    return InlineKeyboardMarkup(keyboard)

# --- рзл. ржорзВрж▓ ржлрж╛ржВрж╢ржи (COMMAND HANDLERS) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "New User"
    
    # --- тнР ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржирж┐ржВ рж╢рж░рзНржд ---
    is_member = await check_channel_member(context, user_id)
    if not is_member:
        await show_join_prompt(update, context)
        return
    
    # --- ржбрзЗржЯрж╛ рж▓рзЛржбрж┐ржВ ржУ рж░рзЗржлрж╛рж░рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ---
    user_data_row = get_user_data(user_id)
    
    referrer_id = None
    if context.args and context.args[0].startswith('ref'):
        try:
            # рж░рзЗржлрж╛рж░рзЗрж▓ ржЖржЗржбрж┐ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛
            referrer_id_from_link = int(context.args[0][3:])
            # рж░рзЗржлрж╛рж░рж╛рж░ ржпржжрж┐ ржирж┐ржЬрзЗржХрзЗ рж░рзЗржлрж╛рж░ ржирж╛ ржХрж░рзЗ ржПржмржВ рж░рзЗржлрж╛рж░рж╛рж░рзЗрж░ ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝
            if referrer_id_from_link != user_id and get_user_data(referrer_id_from_link):
                referrer_id = referrer_id_from_link
        except ValueError:
            referrer_id = None
            
    # ржирждрзБржи ржЗржЙржЬрж╛рж░ рж╣рж▓рзЗ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рж╛
    if not user_data_row:
        add_new_user(user_id, username, referrer_id)
        user_data_row = get_user_data(user_id) # ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рж░рж┐-рж▓рзЛржб
        logger.info(f"New user registered: {user_id}. Referrer: {referrer_id}")
        
        # рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржЬрзЯрзЗржирж┐ржВ ржмрзЛржирж╛рж╕ ржжрзЗржУрзЯрж╛ (ржпржжрж┐ ржерж╛ржХрзЗ)
        if referrer_id and referrer_id != user_id:
            if update_user_points(referrer_id, REFERRAL_JOIN_BONUS):
                logger.info(f"Referral bonus {REFERRAL_JOIN_BONUS} added to referrer {referrer_id}")
                try:
                    await context.bot.send_message(
                        chat_id=referrer_id, 
                        text=f"ЁЯОБ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржирждрзБржи ржЗржЙржЬрж╛рж░ ({username}) ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржиред ржЖржкржирж┐ **{REFERRAL_JOIN_BONUS} ржмрзЛржирж╛рж╕ ржкрзЯрзЗржирзНржЯ** ржкрзЗрзЯрзЗржЫрзЗржиред",
                        parse_mode=telegram.constants.ParseMode.MARKDOWN
                    )
                except telegram.error.BadRequest:
                    pass 

    welcome_message = (
        f"ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо, **{username}**!\n\n"
        "тЬЕ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓ ржЬрзЯрзЗржирж┐ржВ рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗред ржПржЦржи ржЖржкржирж┐ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред\n"
        "ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖрзЯрзЗрж░ рж╕рзНржорж╛рж░рзНржЯ ржЪрж╛ржмрж┐ржХрж╛ржарж┐ ржПржЯрж╛ржЗ! ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЗржиржХрж╛ржо рж╢рзБрж░рзБ ржХрж░рзБржиред"
    )
    
    reply_markup = get_main_keyboard(user_data_row)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode=telegram.constants.ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=telegram.constants.ParseMode.MARKDOWN)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    
    # --- тнР ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржирж┐ржВ ржЪрзЗржХ ---
    is_member = await check_channel_member(context, user_id)
    if not is_member and query.data not in ['check_join', 'start_menu_btn']:
        await show_join_prompt(query, context)
        return
    
    # ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛
    user_data_row = get_user_data(user_id)
    if not user_data_row:
        await query.edit_message_text("тЫФ ржЖржкржирж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржжрзЯрж╛ ржХрж░рзЗ /start рж▓рж┐ржЦрзЗ ржмржЯржЯрж┐ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржиред", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯПа ржорзВрж▓ ржорзЗржирзБ", callback_data='start_menu_btn')]]),
                                      parse_mode=telegram.constants.ParseMode.MARKDOWN)
        return

    # --- ржЬржпрж╝рзЗржи ржЪрзЗржХ ржмрж╛ржЯржи ---
    if query.data == 'check_join':
        is_member_after_check = await check_channel_member(context, user_id)
        if is_member_after_check:
            await start(query, context) 
        else:
            await show_join_prompt(query, context)
        return
            
    # --- ржжрзИржирж┐ржХ рж░рж┐ржУрзЯрж╛рж░рзНржб ржХрзНрж▓рзЗржо ---
    elif query.data == 'daily_reward':
        today = datetime.date.today()
        last_claim = user_data_row.get('last_claim_date')

        if last_claim and last_claim == today:
            message = "тЭМ ржЖржкржирж┐ ржЖржЬржХрзЗрж░ рж░рж┐ржУрзЯрж╛рж░рзНржб ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржХрзНрж▓рзЗржо ржХрж░рзЗржЫрзЗржиред ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
        else:
            # ржкржпрж╝рзЗржирзНржЯ ржпрзЛржЧ ржУ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рж╕ржВрж░ржХрзНрж╖ржг
            if update_user_points(user_id, DAILY_REWARD_POINTS, today):
                
                # рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржХржорж┐рж╢ржи ржжрзЗржУрзЯрж╛
                referrer_id = user_data_row.get('referrer_id')
                if referrer_id:
                    if update_user_points(referrer_id, REFERRAL_DAILY_COMMISSION):
                        try:
                            await context.bot.send_message(
                                chat_id=referrer_id, 
                                text=f"ЁЯОБ ржХржорж┐рж╢ржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржЗржЙржЬрж╛рж░ ржЖржЬ ржжрзИржирж┐ржХ рж░рж┐ржУрзЯрж╛рж░рзНржб ржХрзНрж▓рзЗржо ржХрж░рзЗржЫрзЗржиред ржЖржкржирж┐ **{REFERRAL_DAILY_COMMISSION} ржкрзЯрзЗржирзНржЯ** ржкрзЗрж▓рзЗржиред",
                                parse_mode=telegram.constants.ParseMode.MARKDOWN
                            )
                        except telegram.error.BadRequest:
                            pass 

                # ржЖржкржбрзЗржЯ ржХрж░рж╛ ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржкрзЯрзЗржирзНржЯ ржкрзБржирж░рж╛рзЯ рж▓рзЛржб
                updated_user_data = get_user_data(user_id)
                current_points = updated_user_data['points']
                
                message = (
                    f"тЬЕ рж╕ржлрж▓! ржЖржкржирж┐ ржЖржЬ **{DAILY_REWARD_POINTS} ржкрзЯрзЗржирзНржЯ** ржкрзЗрж▓рзЗржиред\n"
                    f"ржЖрзЯ ржжрзНржмрж┐ржЧрзБржг ржХрж░рждрзЗ ржЕржирзНржпрж╛ржирзНржп ржЯрзНрж░рзНржпрж╛ржХрзЗ ржХрж╛ржЬ ржХрж░рзБржиред\n"
                    f"ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {current_points} ржкрзЯрзЗржирзНржЯред"
                )
            else:
                 message = "тЭМ ржкрзЯрзЗржирзНржЯ ржЖржкржбрзЗржЯрзЗ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"


        await query.edit_message_text(message, reply_markup=get_main_keyboard(get_user_data(user_id)), parse_mode=telegram.constants.ParseMode.MARKDOWN)
    
    # --- ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ---
    elif query.data == 'my_account':
        bot_username = context.bot.username if context.bot.username else "Your_Bot_Username"
        referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
        
        current_points = user_data_row['points']

        account_info = (
            "ЁЯУК **ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржУ рж░рж┐ржлрж╛рж░рзЗрж▓**\n"
            f"ржкрзЯрзЗржирзНржЯ: **{current_points}**\n"
            f"ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж░рзЯрзЛржЬржи: {MIN_WITHDRAW_POINTS} ржкрзЯрзЗржирзНржЯ\n\n"
            "ЁЯФЧ ржЖржкржирж╛рж░ рж░рж┐ржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ: \n"
            f"`{referral_link}`\n\n"
            f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗржирзНрж╕рзЗ ржХрзЗржЙ ржЬрзЯрзЗржи ржХрж░рж▓рзЗ **{REFERRAL_JOIN_BONUS} ржкрзЯрзЗржирзНржЯ** ржПржмржВ рж╕рзЗ ржжрзИржирж┐ржХ рж░рж┐ржУрзЯрж╛рж░рзНржб ржХрзНрж▓рзЗржо ржХрж░рж▓рзЗ ржЖржкржирж┐ **{REFERRAL_DAILY_COMMISSION} ржкрзЯрзЗржирзНржЯ** ржХржорж┐рж╢ржи ржкрж╛ржмрзЗржи!"
        )
        
        back_to_main = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯПа ржорзВрж▓ ржорзЗржирзБ", callback_data='start_menu_btn')]
        ])
        
        await query.edit_message_text(account_info, reply_markup=back_to_main, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    # --- ржЙржЗржержбрзНрж░рзЯрж╛рж▓ ---
    elif query.data == 'withdraw_request':
        current_points = user_data_row['points']
        
        message = ""
        if current_points >= MIN_WITHDRAW_POINTS:
            message = (
                f"ЁЯТ╕ **ржЙржЗржержбрзНрж░ржпрж╝рж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ**\n\n"
                f"ржЖржкржирж╛рж░ ржкрзЯрзЗржирзНржЯ: {current_points}\n"
                f"ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ **ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐** (ржмрж┐ржХрж╛рж╢/ржиржЧржж/рж░ржХрзЗржЯ/ржЕржирзНржпрж╛ржирзНржп) ржПржмржВ **ржЖржЗржбрж┐** рж▓рж┐ржЦрзЗ ржорзЗрж╕рзЗржЬ ржХрж░рзБржиред ржЙржжрж╛рж╣рж░ржг:\n"
                "`ржмрж┐ржХрж╛рж╢, 01XXXXXXXXX`\n"
                "`ржиржЧржж, 01XXXXXXXXX`\n"
                "`рж░ржХрзЗржЯ, 01XXXXXXXXX`\n\n"
                "ржЖржорж╛ржжрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржзржЯрж┐ ржжрзНрж░рзБржд рж░рж┐ржнрж┐ржЙ ржХрж░ржмрзЗред"
            )
        else:
            message = (
                f"тЭМ ржжрзБржГржЦрж┐ржд, ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржХржоржкржХрзНрж╖рзЗ **{MIN_WITHDRAW_POINTS} ржкрзЯрзЗржирзНржЯ** ржкрзНрж░рзЯрзЛржЬржиред\n"
                f"ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржкрзЯрзЗржирзНржЯ: {current_points}"
            )

        back_to_main = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯПа ржорзВрж▓ ржорзЗржирзБ", callback_data='start_menu_btn')]
        ])
        
        await query.edit_message_text(message, reply_markup=back_to_main, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    # --- ржорзЗржирзБ ржмрж╛ржЯржи ---
    elif query.data == 'start_menu_btn':
        await start(query, context)

# --- рзм. ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржорзЛржЯ ржЗржЙржЬрж╛рж░ рж╕ржВржЦрзНржпрж╛ ржПржмржВ ржкрзЯрзЗржирзНржЯ ржжрзЗржЦрж╛рзЯ"""
    user_id = update.effective_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
        return

    stats = get_bot_stats()
    
    stats_message = (
        f"ЁЯУК **ржмржЯ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи (Admin)**\n"
        f"ржорзЛржЯ ржЗржЙржЬрж╛рж░ рж╕ржВржЦрзНржпрж╛: **{stats['total_users']}**\n"
        f"ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржорзЛржЯ ржкрзЯрзЗржирзНржЯ: **{stats['total_points']}**"
    )
    await update.message.reply_text(stats_message, parse_mode=telegram.constants.ParseMode.MARKDOWN)

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рж╕ржорж╕рзНржд ржЗржЙржЬрж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рзЯ"""
    user_id = update.effective_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
        return
    
    # Check if a message is provided after /broadcast
    if not context.args:
        await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржбрзЗрж░ ржмрзНржпржмрж╣рж╛рж░: /broadcast <ржорзЗрж╕рзЗржЬ>")
        return
        
    # Get the full message text after the command
    broadcast_message = update.message.text.replace("/broadcast", "", 1).strip()
    
    user_ids = get_user_id_list()
    sent_count = 0
    blocked_count = 0

    await update.message.reply_text(f"ЁЯУв рж╕ржорж╕рзНржд {len(user_ids)} ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")

    for target_id in user_ids:
        try:
            # Send message with Markdown formatting
            await context.bot.send_message(chat_id=target_id, text=broadcast_message, parse_mode=telegram.constants.ParseMode.MARKDOWN)
            sent_count += 1
        except telegram.error.Forbidden:
            # User blocked the bot
            blocked_count += 1
        except Exception as e:
            logger.error(f"Error sending broadcast message to user {target_id}: {e}")

    result_message = (
        f"тЬЕ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╢рзЗрж╖ рж╣ржпрж╝рзЗржЫрзЗред\n"
        f"ржорзЛржЯ ржЗржЙржЬрж╛рж░: {len(user_ids)}\n"
        f"рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ: {sent_count}\n"
        f"ржмржЯ ржмрзНрж▓ржХ ржХрж░рзЗржЫрзЗ: {blocked_count}"
    )
    await update.message.reply_text(result_message)


# --- рзн. рж╕рж╛ржзрж╛рж░ржг ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рж╕рж╛ржзрж╛рж░ржг ржорзЗрж╕рзЗржЬ ржПржмржВ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛
    user_data_row = get_user_data(user_id)
    if not user_data_row:
        # ржпржжрж┐ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржирж╛ ржерж╛ржХрзЗ, рждржмрзЗ /start ржХрж░рждрзЗ ржмрж▓рж╛
        await update.message.reply_text("тЫФ ржЖржкржирж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржжрзЯрж╛ ржХрж░рзЗ /start рж▓рж┐ржЦрзЗ ржмржЯржЯрж┐ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return
        
    # --- тнР ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /addpoints тнР ---
    if user_id == ADMIN_USER_ID and text.startswith('/addpoints '):
        try:
            parts = text.split()
            target_id = int(parts[1])
            points = int(parts[2])
            
            if update_user_points(target_id, points):
                target_data = get_user_data(target_id)
                current_points = target_data['points'] if target_data else 0

                logger.info(f"Admin {user_id} added {points} to user {target_id}. New points: {current_points}")
                
                await update.message.reply_text(f"тЬЕ рж╕ржлрж▓! ржЗржЙржЬрж╛рж░ {target_id} ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ {points} ржкрзЯрзЗржирзНржЯ ржпрзЛржЧ ржХрж░рж╛ рж╣рж▓рзЛред ржмрж░рзНрждржорж╛ржи ржкрзЯрзЗржирзНржЯ: {current_points}")
                
                # ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
                try:
                    await context.bot.send_message(
                        chat_id=target_id, 
                        text=f"ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЕрзНржпрж╛ржбржорж┐ржи ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ **{points} ржкрзЯрзЗржирзНржЯ** ржпрзЛржЧ ржХрж░рзЗржЫрзЗржиред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: **{current_points}**",
                        parse_mode=telegram.constants.ParseMode.MARKDOWN
                    )
                except telegram.error.BadRequest:
                    pass 
            else:
                await update.message.reply_text("тЭМ рждрзНрж░рзБржЯрж┐: ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░ ID ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржмрж╛ ржбрзЗржЯрж╛ржмрзЗрж╕ рждрзНрж░рзБржЯрж┐ред")
                
        except (ValueError, IndexError):
            await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржбрзЗрж░ ржмрзНржпржмрж╣рж╛рж░: /addpoints <ржЗржЙржЬрж╛рж░_ржЖржЗржбрж┐> <ржкржпрж╝рзЗржирзНржЯ>")
            
    # --- тнР ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб: /checkuser тнР ---
    elif user_id == ADMIN_USER_ID and text.startswith('/checkuser '):
        try:
            target_id = int(text.split()[1])
            target_data = get_user_data(target_id)
            
            if target_data:
                info = (
                    f"ЁЯСд ржЗржЙржЬрж╛рж░ рждржерзНржп ({target_id}):\n"
                    f"ржирж╛ржо: {target_data.get('username', 'N/A')}\n"
                    f"ржкрзЯрзЗржирзНржЯ: {target_data['points']}\n"
                    f"рж╢рзЗрж╖ ржХрзНрж▓рзЗржо: {target_data['last_claim_date']}\n"
                    f"рж░рзЗржлрж╛рж░рж╛рж░ ID: {target_data['referrer_id']}"
                )
                await update.message.reply_text(info)
            else:
                await update.message.reply_text("тЭМ рждрзНрж░рзБржЯрж┐: ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░ ID ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        except (ValueError, IndexError):
            await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржбрзЗрж░ ржмрзНржпржмрж╣рж╛рж░: /checkuser <ржЗржЙржЬрж╛рж░_ржЖржЗржбрж┐>")

    # --- рж╕рж╛ржзрж╛рж░ржг ржорзЗрж╕рзЗржЬ (ржЙржЗржержбрзНрж░рзЯрж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ) ---
    else:
        # ржЙржЗржержбрзНрж░рзЯрж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржлрж░рзЛржпрж╝рж╛рж░рзНржб ржХрж░рж╛рж░ ржЬржирзНржп
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"ЁЯТ╕ **ржирждрзБржи ржЙржЗржержбрзНрж░ржпрж╝рж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ!**\n"
                 f"ржЗржЙржЬрж╛рж░ ID: `{user_id}`\n"
                 f"ржмрж░рзНрждржорж╛ржи ржкрзЯрзЗржирзНржЯ: {user_data_row.get('points', 0)}\n"
                 f"ржорзЗрж╕рзЗржЬ: {text}",
            parse_mode=telegram.constants.ParseMode.MARKDOWN
        )

        await update.message.reply_text(
            "ржЖржкржирж╛рж░ ржорзЗрж╕рзЗржЬржЯрж┐ (рж╕ржорзНржнрж╛ржмрзНржп ржЙржЗржержбрзНрж░рзЯрж╛рж▓ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ) ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржПржЯрж┐ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ ржжрзЗржЦрж╛ рж╣ржЪрзНржЫрзЗред\n"
            "ржЕржирзНржпрж╛ржирзНржп ржЕржкрж╢ржирзЗрж░ ржЬржирзНржп ржорзЗржирзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:",
            reply_markup=get_main_keyboard(user_data_row)
        )

# --- рзо. ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ (MAIN EXECUTION) ---

def main() -> None:
    """ржмржЯ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ ржХрж░рзЗ"""
    
    if not TELEGRAM_BOT_TOKEN or not DATABASE_URL:
        logger.error("тЭМ ржкрж░рж┐ржмрзЗрж╢ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░рзБржи (TELEGRAM_BOT_TOKEN, DATABASE_URL)ред")
        # Ensure the application doesn't proceed without tokens
        sys.exit(1) 
    
    # ржбрзЗржЯрж╛ржмрзЗрж╕ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
    init_db()

    logger.info("Starting Smart Earn Bot with PostgreSQL...") 
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛ ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    application.add_handler(CommandHandler("addpoints", message_handler)) # Using message_handler for parsing
    application.add_handler(CommandHandler("checkuser", message_handler)) # Using message_handler for parsing

    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЕржирзНржпрж╛ржирзНржп ржЯрзЗржХрзНрж╕ржЯ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп, ржпрж╛ ржЙржЗржержбрзНрж░ржпрж╝рж╛рж▓ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╣рж┐рж╕рж╛ржмрзЗ ржмрж┐ржмрзЗржЪрж┐ржд)
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler)) 

    print("тЬЕ Smart Earn Bot Running... Check console for logs.")
    
    # For long polling (рж╕рж╛ржзрж╛рж░ржгржд Render/Railway-ржП ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝, ржХрж┐ржирзНрждрзБ ржУржпрж╝рзЗржмрж╣рзБржХ-ржПрж░ ржЬржирзНржп ржПржЯрж┐ ржЙржкржпрзБржХрзНржд ржиржпрж╝)
    # ржпрзЗрж╣рзЗрждрзБ ржЖржкржирж┐ Node.js ржерзЗржХрзЗ Python-ржП ржПрж╕рзЗржЫрзЗржи ржПржмржВ Render-ржП deployment ржХрж░рждрзЗ ржЪрж╛ржи,
    # ржпржжрж┐ ржЖржкржирж┐ ржУржпрж╝рзЗржмрж╣рзБржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рзЗржи рждржмрзЗ ржПржЗ ржкржжрзНржзрждрж┐ржЯрж┐ржЗ рж╕рзЗрж░рж╛:
    application.run_polling(poll_interval=3)

if __name__ == '__main__':
    # Add an exception handler for the main function
    try:
        main()
    except Exception as e:
        logger.critical(f"Fatal error in main execution: {e}")
        sys.exit(1)
```eof

---

## ЁЯТб ржоржирзЗ рж░рж╛ржЦржмрзЗржи

1.  **ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓:** ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ Render-ржП **`TELEGRAM_BOT_TOKEN`**, **`DATABASE_URL`** ржПржмржВ ржЖржкржирж╛рж░ **`ADMIN_USER_ID`** рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗред
2.  **ржкрж╛ржЗржержи ржкрзНржпрж╛ржХрзЗржЬ:** ржЖржкржирж╛рж░ `requirements.txt` ржлрж╛ржЗрж▓рзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржкрзНржпрж╛ржХрзЗржЬржЧрзБрж▓рж┐ ржЕржмрж╢рзНржпржЗ ржерж╛ржХрждрзЗ рж╣ржмрзЗ:
    ```
    python-telegram-bot
    psycopg2-binary
    ```
3.  **ржбрж┐ржкрзНрж▓рзЯржорзЗржирзНржЯ:** ржПржЗ `server.py` ржлрж╛ржЗрж▓ржЯрж┐ ржЖржкржирж╛рж░ рж░рж┐ржкрзЛржЬрж┐ржЯрж░рж┐рждрзЗ ржпрзЛржЧ ржХрж░рзБржи ржПржмржВ ржбрж┐ржкрзНрж▓рзЯ ржХрж░рзБржиред ржПржЯрж┐ ржПржЦржи **рж▓ржВ ржкрзЛрж▓рж┐ржВ (long polling)** ржорзЛржбрзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ ржЫрзЛржЯ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржирзЗрж░ ржЬржирзНржп Render-ржП ржЙржкржпрзБржХрзНрждред
